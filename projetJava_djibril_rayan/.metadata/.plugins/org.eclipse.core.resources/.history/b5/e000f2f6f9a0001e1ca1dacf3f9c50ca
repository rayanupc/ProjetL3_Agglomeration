/**
 * MenuApplication.java
 * 
 * @author Rayan Almohaize, Djibril Dahoub
 *
 */
package up.mi.da.agglomeration;

import java.io.File;
import java.util.InputMismatchException;
import java.util.Scanner;
import up.mi.da.exceptions.FichierIncorrectException;

/**
 * Menu principale du programme
 */

public class MenuApplication {
	
	/**
	 * permet d'etablire le menu grace auquel l'utilisateur choisira de resoudre le problème des bornes de recharge
	 * de son agglomération manuellement ou automatiquer et il pourra aussi sauvegarder et afficher son agglomération
	 */
	public static void menu(String fichier, Scanner sc) {
		try {
			//On recupére l'agglomeration du fichier de l'utilisateur
			Agglomeration agglo = ParserAgglomeration.parserAgglomeration(fichier);
			//Affichage des route de cette agglomeration
			System.out.println("Les route de votre agglomération sont : \n");
			StringBuilder sb = new StringBuilder("");
			for(int i=0; i<agglo.getEnssembleDeVille().size(); i++) {
				for(int j=0; j<agglo.getEnssembleDeVille().size(); j++) {
					if(agglo.getGraphe().estRelie(i, j)==true) {
						if(sb.toString().contains(agglo.getEnssembleDeVille().get(j).getNom()+"<->"+agglo.getEnssembleDeVille().get(i).getNom())==false) {
							sb.append(agglo.getEnssembleDeVille().get(i).getNom()+"<->"+agglo.getEnssembleDeVille().get(j).getNom()+" ; ");
						}
					}
				}
			}
			System.out.println(sb.toString());
			System.out.println();
			//Affichage des bornes s'il y'en a
			boolean isBorne = false;
			for(Ville v : agglo.enssembleDeVille) {
				if(v.getPossedeUneBorne()) {
					isBorne = true;
				}
			}
			if(isBorne==false) {
				System.out.println("Aucune borne n'a été trouvée");
				System.out.println();
			}
			else {
				System.out.println(agglo.listeVilleBornes());
				System.out.println();
			}
			
			int choix = 0;
				
			do{
				try {
					System.out.println("1) résoudre manuellement");
					System.out.println("2) résoudre automatiquement");
					System.out.println("3) sauvegarder");
					System.out.println("4) fin");
				
					choix = sc.nextInt();
					switch(choix) {
					case 1:
						//On vérifie si l'agglomération donné contient des zones de recharge, 
						//si oui on vérifie qu'elle respecte bien les conditions d'accessibilité
						boolean contientAucuneZoneDeRecharge = true;
						boolean respectAccessibilite = true;
						for(Ville v : agglo.getEnssembleDeVille()) {
							if(v.getPossedeUneBorne()==true) {
								contientAucuneZoneDeRecharge=false;
							}
						}
						
						if(contientAucuneZoneDeRecharge==true) {
							for(Ville v : agglo.getEnssembleDeVille()) {
								v.setPossedeUneBorne(true);
							}
						}
						else{
							if(agglo.respecteConditionAccessibilite()==false) {
								for(Ville v : agglo.getEnssembleDeVille()) {
									v.setPossedeUneBorne(true);
									respectAccessibilite = false;
								}
							}
						}
						//Si l'agglomération n'a pas de borne...
						if(contientAucuneZoneDeRecharge==true) {
							System.out.println("Votre agglomération n'avait au départ aucune borne de recharge,\n "
									+ "nous vous avons donc mis des bornes de recharges dans toutes les villes pour vous facilité la résolution");
						}
						//si elle en a mais ne respacte pas les conditions d'accessibilité
						if(respectAccessibilite==false) {
							System.out.println("Votre agglomération ne réspectait pas les condition d'accessibilité aux bornes de recharge,\n "
									+ "nous vous avons donc mis des bornes de recharges dans toutes les villes pour vous facilité la résolution");
						}
						System.out.println(agglo.listeVilleBornes());
						agglo.menuPlacementDeBorneManuelle(sc);
						break;
					case 2:
						//Optimisation automatique
						agglo.optimisationScoreAgglomeration();
						break;
					case 3:
						int choixSave = 0;
						do {
							//Sauvegarde du fichier dans un fichier par défaut ou dans un fichier choisi par l'utilisateur
							System.out.println("1) Sauvegarder votre agglomération dans le fichier par défaut (sauvegardeAgglomeration.txt)");
							System.out.println("2) Sauvegarder votre agglomération dans le fichier de votre choix");
							System.out.println("3) Retour au menu");
							String fichierSave;
							choixSave = sc.nextInt();
							switch(choixSave) {
							case 1:
								fichierSave = "sauvegardeAgglomeration.txt";
								SauvegardeAgglomeration.sauvegardeAgglomeration(agglo, fichierSave);
								break;
							case 2:
								System.out.println("Entrez le chemin vers le fichier que vous voulez");
								fichierSave = sc.next();
								File file = new File(fichierSave);
						        if (!file.exists()) {
						            System.err.println("Le fichier spécifié n'a pas été trouvé : " + fichier);
						        }
						        else {
									SauvegardeAgglomeration.sauvegardeAgglomeration(agglo, fichierSave);
						        }
								break;
							case 3:
								break;
							default:
								System.err.println("Entrez 1, 2 ou 3");
							}
						}while(choixSave!=1 && choixSave!=2 && choixSave!=3);
						break;
					case 4:
						//affichage de l'aglomération sous forme de graphe coloré
						GrapheColoreGraphStream.grapheColore(agglo);
						break;
					default:
						System.err.println("Entrez 1, 2, 3 ou 4");
					}
				}catch(InputMismatchException e) {
					System.err.println("Vous devez entrer un entrer un nombre entier");
					sc.nextLine();
				}
			}while(choix!=4);
		}catch(FichierIncorrectException e) {
			System.err.println("Le fichier entré en argument à été trouver mais il ne peut pas être lu car il ne suit pas le format demandé");
		}
	}
}